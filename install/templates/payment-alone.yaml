apiVersion: v1
kind: Template
metadata:
  name: traditional-payment-template
  annotations:
    description: "Template for the creation of a traditional payment service"
parameters:
- description: The name of the project
  displayName: Name of the project
  name: PROJECT
  value: "coolstore"
  required: true
- description: The name of the image for the payment service
  displayName: Payment Service image name
  name: PAYMENT_IMAGE_NAME
  value: "quay.io/mhildenb/homemade-serverless-java:initial-service-1.0"
  required: true
- description: The branch of the repo where the code (devfile) can be found for payment service in CRW
  displayName: The branch of the repo where the code (devfile) can be found for payment service in CodeReady Workspaces
  name: CRW_DEVFILE_REVISION
  value: serverless-demo
  required: true
- description: The url of the repo where code (devfile) can be found to open payment service in CRW
  displayName: The url of the repo where code (devfile) can be found to open payment service in CodeReady Workspaces
  name: CRW_DEVFILE_REPO
  value: "https://github.com/hatmarch/coolstore.git"
  required: true
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: payment-traditional
      app.kubernetes.io/component: payment-traditional
      app.kubernetes.io/instance: payment-traditional
      app.kubernetes.io/part-of: focus
      app.openshift.io/runtime-version: initial-service-1.0
    name: payment-traditional
    namespace: ${PROJECT}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: payment-traditional
      deploymentconfig: payment-traditional
    sessionAffinity: None
    type: ClusterIP
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      app.openshift.io/vcs-ref: '${CRW_DEVFILE_REVISION}'
      app.openshift.io/vcs-uri: '${CRW_DEVFILE_REPO}'
      alpha.image.policy.openshift.io/resolve-names: '*'
      deployment.kubernetes.io/revision: "1"
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"payment-traditional:initial-service-1.0","namespace":"${PROJECT}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"payment-traditional\")].image","pause":"false"}]'
      openshift.io/generated-by: OpenShiftWebConsole
    labels:
      app: payment-traditional
      app.kubernetes.io/component: payment-traditional
      app.kubernetes.io/instance: payment-traditional
      app.kubernetes.io/part-of: focus
      app.openshift.io/runtime: java
      app.openshift.io/runtime-namespace: ${PROJECT}
    name: payment-traditional
    namespace: ${PROJECT}
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: payment-traditional
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        creationTimestamp: null
        labels:
          app: payment-traditional
          deploymentconfig: payment-traditional
      spec:
        containers:
        - image: quay.io/mhildenb/homemade-serverless-java@sha256:d31e7f642196350df42863cdd8ffcaac456f7b3e7dcefc210c2bbfdda98fde8e
          imagePullPolicy: IfNotPresent
          name: payment-traditional
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: payment-traditional
      app.kubernetes.io/component: payment-traditional
      app.kubernetes.io/instance: payment-traditional
      app.kubernetes.io/part-of: focus
    name: payment-traditional
    namespace: ${PROJECT}
  spec:
    lookupPolicy:
      local: true
    tags:
    - annotations:
        openshift.io/generated-by: OpenShiftWebConsole
        openshift.io/imported-from: ${PAYMENT_IMAGE_NAME}
      from:
        kind: DockerImage
        name: ${PAYMENT_IMAGE_NAME}
      generation: 2
      importPolicy: {}
      name: initial-service-1.0
      referencePolicy:
        type: Local
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: payment-traditional
      app.kubernetes.io/component: payment-traditional
      app.kubernetes.io/instance: payment-traditional
      app.kubernetes.io/part-of: focus
      app.openshift.io/runtime-version: initial-service-1.0
    name: payment-traditional
    namespace: ${PROJECT}
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: payment-traditional
      weight: 100
    wildcardPolicy: None
